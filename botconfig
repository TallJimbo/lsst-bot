# -*- python -*-

import os
import logging

# Root URL for git; expect to be able to clone {git.url.root}/{package} and get a repo names {package}
git.url.root = os.environ["LSST_DMS"]

# Override git URLs for specific packages.  {root} and {pkg} are substituted with git.url.root and the
# package name, respectively.
git.url.overrides = {"sconsUtils": "{root}/devenv/{pkg}"}

# When running git, redirect stderr to /dev/null.
git.quiet = True

# When running git, log (at DEBUG level) the commands we run.
git.echo = False

# Instead of cloning from the server, use the git-new-workdir command to create repos from an
# existing bot stack that share everything (via symlinks) but the checked-out branch.
# This parameter should be the path to the master repo, either relative to the cloned stack
# or absolute.  If None, repos will be cloned from the remote repository.
# If this parameter is not None and a repo cannot be found in the base stack, it will also
# be cloned from the remote repository.
git.link.base = None

# Path to the git-new-workdir command (this is included with git in a contrib directory, but
# it is usually not installed into $PATH, and sometimes isn't marked as executable).
# The default is where it can be found on Ubuntu.
git.link.cmd = "/usr/share/doc/git-core/contrib/workdir/git-new-workdir"

# Packages to ignore entirely when we find them in the dependency tree.
# We won't try to check these out or include them as dependencies of the metapackage.
packages.ignore = ["toolchain", "implicitProducts"]

# Packages where we just want to use a version already declared to EUPS, with versions
# determined by the regular EUPS VRO when the metapackage is setup.
# This will be included as regular (nonexact and recursive) dependencies of the metapackage.
packages.external = ["boost", "scons", "doxygen", "python", "numpy", "mysqlpython", "activemqcpp",
                     "eigen", "cfitsio", "wcslib", "xpa", "swig", "mysqlclient", "matplotlib", "mkl",
                     "minuit2", "gsl", "fftw", "pyfits", "cuda_toolkit", "pysqlite", "astrometry_net",
                     "afwdata", "astrometry_net_data", "suprime_data", "testdata_subaru", "pbasf2"]

# Packages whose source directories are manually created and managed by the user; they
# will not be assumed to be git working copies (and may be symlinks), but will be included
# in the EUPS metapackage just like git packages are.
# If a manual package is not present when 'sync' is run, the package will be treated
# as external packages.
# The packages listed here as defaults are HSC packages in mercurial; their presence
# here shouldn't mess up LSST people, and it may help HSC people.
packages.manual = ["hscAstrom", "distEst", "hscPipe", "hscMosaic", "solvetansip"]

# Git refs (branches, tags, SHAs, etc.) to use for packages without an explicit override.
# These will be tried in order; if we can't checkout the first, we fall back to the second, etc.
# Note that for this to work well, you'll need a new-enough git that 'git checkout' is capable
# of automatically creating a tracking branch.
packages.refs.default = ["master"]

# Dict of {package: ref} overrides specifying git refs for specific packages.
packages.refs.overrides = {}

# Top level package whose dependencies we'll manage; usually overridden in subdirectories.
packages.top = ["afw"]

# Extra EUPS tags to apply to in-place setups; these must already be enabled (in startup.py or elsewhere).
eups.tags = []

# Name of repo set for various EUPS things (usually expanded into version numbers and metapackage name).
eups.name = "bot"  # almost always overridden in subdirectories

# Passed to Eups constructor to turn off warnings (EUPS doesn't always obey).
eups.quiet = True

# Callable used to set the EUPS version number for in-place package declarations.
# It will be passed two arguments: 'ref' is the git ref used to checkout the package, and
# 'eups' is the eups config category.
eups.version = lambda ref, eups: eups.name

# EUPS metapackage name.  {eups} will be expanded to the eups config category, but
# substituting eups.name into the metapackage name is discouraged because it allows
# multiple metapackages to be setup at once.
eups.meta = "meta"

# If True, redirect scons stderr to /dev/null.
scons.quiet = False

# If True, log (at DEBUG level) the scons commands we run.
scons.echo = False

# Setup the basic logger.
logging.basicConfig(level=logging.INFO)
