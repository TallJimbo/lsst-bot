# -*- python -*-

import os
import sys
import logging

LSST_DMS = "git@git.lsstcorp.org:LSST/DMS/{pkg}.git"
LSST_CONTRIB = "git@git.lsstcorp.org:contrib/{pkg}.git"

HSC_GIT = "ssh://mitaka/ana/lsstrepo/{pkg}.git"
HSC_HG = "ssh://mitaka//ana/hgrepo/{pkg}"

# Package URL templates for git remotes
git.url.remotes = {"LSST": LSST_DMS, "HSC-GitHub": HSC_GIT}

# Dictionary of per-package overrides; each value must either be a dict that overrides git.url.remotes
# for that package, or a string that overrides {pkg} for that package when used in a git URL.
git.url.overrides = {
    "sconsUtils": "devenv/sconsUtils"
}

# Which remote to clone from (it will be renamed from 'origin' to the name used here)
git.origin = "LSST"

# Redirect git output to these buffers
git.stderr = sys.stderr
git.stdout = open(os.path.join(path, "git.log"), "w")

# Logging level at which to echo the git the commands we run.
git.echo = logging.INFO

# Look for a git repo named {pkg} in the given directory in turn, and if found, pass it using the
# --reference option to git clone (this allows cloning a remote repository while sharing data via
# hardlinks with the reference clone).
git.reference = None

# Package URL templates for hg remotes ('remote' is the git term; hg calls them 'paths').
hg.url.remotes = {"mitaka": HSC_HG}

# Per-package overrides for hg paths.
hg.url.overrides = {}

# Which hg remote to clone from.
hg.origin = "mitaka"

# Override hg URLs for specific packages.  See git.url.overrides for more information.
hg.url.overrides = {}

# Redirect hg output to these buffers
hg.stderr = sys.stderr
hg.stdout = open(os.path.join(path, "hg.log"), "w")

# Logging level at which to echo the hg the commands we run.
hg.echo = logging.INFO

# Replacement dictionary that maps git refs to hg refs.
hg.refs.replace = {"master": "default"}

# Packages that use hg instead of git.
hg.packages = set(["hscAstrom", "distEst", "hscPipe", "hscMosaic", "solvetansip", "runOnsite",
                   "hscPipeBase", "meas_extensions_shapeMiyatake", "fitsthumb"])

# Use git-remote-hg to manage hg packages instead of hg itself.
hg.use_git = True

# Packages to ignore entirely when we find them in the dependency tree.
# We won't try to check these out or include them as dependencies of the metapackage.
packages.ignore = set(["toolchain", "implicitProducts"])

# Packages where we just want to use a version already declared to EUPS, with versions
# determined by the regular EUPS VRO when the metapackage is setup.
# This will be included as regular (nonexact and recursive) dependencies of the metapackage.
packages.external = set(["boost", "scons", "doxygen", "python", "numpy", "mysqlpython", "activemqcpp",
                         "eigen", "cfitsio", "wcslib", "xpa", "swig", "mysqlclient", "matplotlib", "mkl",
                         "minuit2", "gsl", "fftw", "pyfits", "cuda_toolkit", "pysqlite", "astrometry_net",
                         "astrometry_net_data", "suprime_data", "testdata_subaru", "pbasf2", "scisql",
                         "scipy", "libpng", "libjpeg", "psycopg2", "pg8000", "condor", "condor_glidein",
                         "nlopt", "afwdata", "healpy"])

# Git refs (branches, tags, SHAs, etc.) to use for packages without an explicit override.
# These will be tried in order; if we can't checkout the first, we fall back to the second, etc.
# Note that for this to work well, you'll need a new-enough git that 'git checkout' is capable
# of automatically creating a tracking branch.
packages.refs.default = ["master"]

# Dict of {package: ref} overrides specifying git refs for specific packages.
# If ref is None, the source directory for that package will not be assumed to be a git working copiy,
# but it will be included in the EUPS metapackage present when 'sync' is run.
packages.refs.overrides = {}

# A synonym for 'hg.packages'.
packages.hg = hg.packages

#
# A path to another bot stack whose packages we can build on top of.
#
# When a package's git ref is one of those in packages.inherit.refs, it is present in the base
# stack at that ref, and this is also true for all its dependencies, we will use the version
# from the base metapackage.  These inherited packages will never be redeclared, and most batch
# operations like 'build' will skip them unless the '--inherited' option is used.
# Inherited packages will be included in the packages file, with their refs in square brackets.
#
# Because bot generally needs to clone a repo to figure out what ref to use for a package,
# we'll end up doing the clone and then deleting it unless the ref is in
# packages.refs.overrides.  However, if git.link.base is set, the discarded clone is generally
# very cheap, so it usually makes sense to set git.link.base and packages.inherit.base to the same
# value.
#
# The path should either be absolute or relative to the stack root.
packages.inherit.base = None

# A list of git refs that indicate we should use the base stack instead (see packages.inherit.base).
# This is ignored if packages.inherit.base is None, so it's safe to put 'master' here, since that's
# what we'll usually want to delegate to a base stack.  Including 'None' in the list allows us
# to inherit source directories that aren't git repos.
packages.inherit.refs = set(['master', 'next', None])

# Top level package whose dependencies we'll manage; usually overridden in stack directories.
packages.top = ["afw"]

# Extra EUPS tags to apply to in-place setups; these must already be enabled (in startup.py or elsewhere).
eups.tags = []

# Name of repo set for various EUPS things (usually expanded into version 'numbers').
eups.name = "bot"  # almost always overridden in stack directories

# Passed to Eups constructor to turn off warnings (EUPS doesn't always obey).
eups.quiet = True

# Callable used to set the EUPS version number for in-place package declarations.
# It will be passed two arguments: 'ref' is the git ref used to checkout the package, and
# 'eups' is the eups config category.
eups.version = lambda ref, eups: eups.name

# EUPS metapackage name.  {eups} will be expanded to the eups config category, but
# substituting eups.name into the metapackage name is discouraged because it allows
# multiple metapackages to be setup at once, and that usually isn't a good idea (but
# see packages.base.path for another way for metapackages to share things).
eups.meta = "meta"

# Redirect scons output to these buffers.
scons.stderr = open(os.path.join(path, "scons.log"), "w")
scons.stdout = scons.stderr

# Logging level at which to echo the scons commands we run
scons.echo = logging.INFO

# Setup the basic logger.
logging.basicConfig(level=logging.DEBUG)
